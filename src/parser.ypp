%{
#include <boost/lexical_cast.hpp>
#include <cstdlib>
#include "literal.hpp"
#include "yyglobal.hpp"
	int yylex(void);
	inline void yyerror(char const *) { std::cerr<<"YYERROR:"<<std::endl; exit(1);}

	%}

	%token NUMBER IDENTIFY STRING
	%token OPTION
	%left '-' '+'
	%left '*'
	%right '^'
	%token '(' ')'

	%%

	file:
{} /*empty*/
| file poly_def {}
| file optionline {}

optionline:
OPTION IDENTIFY { parse_options(get<string>($1), get<string>($2)); }
|OPTION STRING { parse_options(get<string>($1), get<string>($2)); }
|OPTION NUMBER { parse_options(get<string>($1), get<int64_t>($2)); }
|OPTION '-' NUMBER { parse_options(get<string>($1), -1 * get<int64_t>($3)); }

poly_def:
IDENTIFY '=' exp
{
	auto& P = get<polynomial>($3);
	P.name() = get<string>($1);
	vP.push_back(P);
	vindex.push_back(vP.size());
	std::cerr<<"Parsing..."<<vindex.size()<<" polynomials have been parsed\r";
    //add this polynomial into literal if not added, so if this part appear in another polynomial can be replaced by this literal
    literal_add(P.name());
}

monowithsign:
mono { $$ = $1; }
| '-' mono
{
	auto& t = get<monomial>($2);
	t.reverse_sign();
	$$ = t;
}

mono:
IDENTIFY
{
	int i = literal_add(get<string>($1));
	monomial m(i);
	$$ = m;
}
| mono '^' NUMBER
{
	assert(get<monomial>($1).size() == 1);
	int n = get<int64_t>($3);
	$$ = monomial(get<monomial>($1).lit(0), n);
}
| NUMBER
{
	int i = literal_add(boost::lexical_cast<string>(get<int64_t>($1)), true);
	monomial m(i);
	$$ = m;
}
| mono '*' mono { $$ = get<monomial>($1) * get<monomial>($3); }
| varstr
{
	int i = get<int64_t>($1);
	monomial m(i);
	$$ = m;
}

varstr:
'(' exp ')'
{
	int nli = vP_get(get<polynomial>($2));
	if (nli == -1)
	{
		nli = get<polynomial>($2).single_id();
		if (nli == -1)//new polynomial
		{
			nli = literal_append_tmp();
			get<polynomial>($2).name() = literal_name(nli);
			literal_set_ring_level(nli, get<polynomial>($2).ring_level());
			vP.push_back(std::move(get<polynomial>($2)));
		}
	}
	else 
	{
		nli = literal_get(vP[nli].name());
	}
	$$ = nli;
}
| IDENTIFY '(' exp ')'
{
	/*a function call*/
	int nli = vP_get(get<polynomial>($3));
	if (nli == -1)
	{
		nli = get<polynomial>($3).single_id();
		if (nli == -1)//new polynomial
		{
			nli = literal_append_func();
			get<polynomial>($3).name() = literal_name(nli);
			literal_set_ring_level(nli, get<polynomial>($3).ring_level());
			vP.push_back(std::move(get<polynomial>($3)));
		}
	}
	else
	{
		nli = literal_get(vP[nli].name());
	};
	funcexpr nf;
	nf._funcname=get<string>($1);
	nf._paraid=nli;
	int nfi = vfunc_get(nf); 
	if (nfi == -1)
	{
		nfi = literal_append_func(); 
		nf._resname = literal_name(nfi); 
		vfunc.push_back(nf);
		literal_set_ring_level(nfi, nf.ring_level());
	}
	else
	{
		nfi = literal_get(vfunc[nfi]._resname);
	};
	$$ = nfi;
}

exp:
monowithsign { $$ = polynomial(get<monomial>($1)); }
| exp '+' mono
{
	$$ = std::move(get<polynomial>($1));
	get<polynomial>($$) += std::move(get<monomial>($3));
}
| exp '-' mono
{
	$$ = std::move(get<polynomial>($1));
	get<polynomial>($$) -= std::move(get<monomial>($3));
}
