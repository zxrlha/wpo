%define parse.lac full
%define parse.error detailed
%{
#include <boost/lexical_cast.hpp>
#include <cstdlib>
#include "literal.hpp"
#include "yyglobal.hpp"
	int yylex(void);
	inline void yyerror(char const * str) { std::cerr<<"YYERROR:"<<str<<std::endl; exit(1);}

	%}

	%token NUMBER IDENTIFY STRING
	%token OPTION
	%left '-' '+'
	%left '*'
	%right '^'
	%token '(' ')'

	%%

	file:
{} /*empty*/
| file poly_def {}
| file optionline {}

optionline:
OPTION IDENTIFY { parse_options(get<string>($1), get<string>($2)); }
|OPTION STRING { parse_options(get<string>($1), get<string>($2)); }
|OPTION NUMBER { parse_options(get<string>($1), boost::lexical_cast<int64_t>(get<string>($2))); }
|OPTION '-' NUMBER { parse_options(get<string>($1), -1 * boost::lexical_cast<int64_t>(get<string>($3))); }

poly_def:
IDENTIFY '=' exp
{
	auto& P = *get<spp>($3);
    int nli = vP_get(P);
	if (nli == -1)
	{
		nli = P.single_id();
		if (nli == -1)//new polynomial
		{
		}
	}
	else 
	{
		nli = literal_get(vP[nli].name());
        monomial m(nli);
        P = polynomial(m);
	}
	P.name() = get<string>($1);
	vP_push(P);
	vindex.push_back(vP.size());
	std::cerr<<"Parsing..."<<vindex.size()<<" polynomials have been parsed\r";
    //add this polynomial into literal if not added, so if this part appear in another polynomial can be replaced by this literal
    literal_add(P.name());
    //set correct ring level
    literal_set_ring_level(literal_get(P.name()), P.ring_level());
}

monowithsign:
mono { $$ = $1; }
| '-' mono
{
	auto& t = get<monomial>($2);
	t.reverse_sign();
	$$ = t;
}

mono:
IDENTIFY
{
	int i = literal_add(get<string>($1));
	monomial m(i);
	$$ = m;
}
| mono '^' NUMBER
{
	assert(get<monomial>($1).size() == 1);
	int n = boost::lexical_cast<int64_t>(get<string>($3));
	$$ = monomial(get<monomial>($1).lit(0), n);
}
| mono '^' '(' '-' NUMBER ')'
{
    /*understand as a function call*/
    assert(get<monomial>($1).size() == 1);
    int n = boost::lexical_cast<int64_t>(get<string>($5));
    funcexpr nf;
    nf._funcname=invname;
    nf._paraid=get<monomial>($1).lit(0);
    int nfi = vfunc_get(nf);
    if (nfi == -1)
    {
        nfi = literal_append_tmp();
        nf._resname = literal_name(nfi);
        vfunc.push_back(nf);
        literal_set_ring_level(nfi, nf.ring_level());
    }
    else
    {
        nfi = literal_get(vfunc[nfi]._resname);
    }
    $$ = monomial(nfi, n);
}
| NUMBER
{
	int i = literal_add(get<string>($1), true);
	monomial m(i);
	$$ = m;
}
| mono '*' mono { $$ = get<monomial>($1) * get<monomial>($3); }
| varstr
{
	$$ = std::move($1);
}

varstr:
'(' exp ')'
{
	int nli = vP_get(*get<spp>($2));
	if (nli == -1)
	{
		nli = get<spp>($2)->single_id();
		if (nli == -1)//new polynomial
		{
			nli = literal_append_tmp();
			get<spp>($2)->name() = literal_name(nli);
			literal_set_ring_level(nli, get<spp>($2)->ring_level());
			vP_push(std::move(*get<spp>($2)));
		}
	}
	else 
	{
		nli = literal_get(vP[nli].name());
	}
	$$ = monomial(nli);
}
| IDENTIFY '(' exp ')'
{
	/*a function call*/
	int nli = vP_get(*get<spp>($3));
	if (nli == -1)
	{
		nli = get<spp>($3)->single_id();
		if (nli == -1)//new polynomial
		{
			nli = literal_append_tmp();
			get<spp>($3)->name() = literal_name(nli);
			literal_set_ring_level(nli, get<spp>($3)->ring_level());
			vP_push(std::move(*get<spp>($3)));
		}
	}
	else
	{
		nli = literal_get(vP[nli].name());
	};
	funcexpr nf;
	nf._funcname=get<string>($1);
	nf._paraid=nli;
	int nfi = vfunc_get(nf);
	if (nfi == -1)
	{
		nfi = literal_append_tmp();
		nf._resname = literal_name(nfi);
		vfunc.push_back(nf);
		literal_set_ring_level(nfi, nf.ring_level());
	}
	else
	{
		nfi = literal_get(vfunc[nfi]._resname);
	};
	$$ = monomial(nfi);
}

exp:
monowithsign { $$ = spp(new polynomial(get<monomial>($1))); }
| exp '+' mono
{
	$$ = std::move(get<spp>($1));
	*get<spp>($$) += std::move(get<monomial>($3));
}
| exp '-' mono
{
	$$ = std::move(get<spp>($1));
	*get<spp>($$) -= std::move(get<monomial>($3));
}
