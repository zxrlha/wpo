%{
#include <boost/lexical_cast.hpp>
#include <cstdlib>
#include "literal.hpp"
#include "yyglobal.hpp"
	int yylex(void);
	inline void yyerror(char const *) { std::cerr<<"YYERROR:"<<std::endl; exit(1);}

	%}

	%token NUMBER IDENTIFY STRING
	%token OPTION
	%left '-' '+'
	%left '*'
	%right '^'

	%%

	file:
{} /*empty*/
| file poly_def {}
| file optionline {}

optionline:
OPTION IDENTIFY { if (get<string>($1)=="tmp_prefix") tmp_prefix= get<string>($2); else if (get<string>($1)=="tmp_suffix") tmp_suffix=get<string>($2); else { std::cerr<<"ERROR:Unknown option:"<<$1<<std::endl; exit(1);}}
|OPTION STRING { if (get<string>($1)=="tmp_prefix") tmp_prefix= get<string>($2); else if (get<string>($1)=="tmp_suffix") tmp_suffix=get<string>($2); else if (get<string>($1)=="line_suffix") line_suffix=get<string>($2); else {std::cerr<<"ERROR:Unknown option:"<<$1<<std::endl; exit(1);}}
|OPTION NUMBER { if (get<string>($1)=="tmp_start") tmp_start = get<int>($2); else {std::cerr<<"ERROR:Unknown option:"<<$1<<std::endl; exit(1); }}

poly_def:
IDENTIFY '=' exp { auto& P = get<polynomial>($3); P.name() = get<string>($1); vP.push_back(P); }

monowithsign:
mono { $$ = $1; }
| '-' mono { auto& t = get<monomial>($2); t.reverse_sign(); $$ = t;}

mono:
IDENTIFY { int i = literal_add(get<string>($1)); monomial m; m.resize(i+1); m[i] = 1; $$ = m; }
| IDENTIFY '^' NUMBER { int li = literal_add(get<string>($1)); int ti = get<int>($3); monomial m; m.resize(li+1); m[li] = ti; $$ = m; }
| NUMBER { int i = literal_add(boost::lexical_cast<string>(get<int>($1))); monomial m; m.resize(i+1); m[i] = 1; $$ = m; }
| mono '*' mono { $$ = get<monomial>($1) * get<monomial>($3); }

exp:
monowithsign { $$ = polynomial(get<monomial>($1)); }
| exp '+' mono { $$ = std::move(get<polynomial>($1)); get<polynomial>($$) += get<monomial>($3); }
| exp '-' mono { $$ = std::move(get<polynomial>($1)); get<polynomial>($$) -= get<monomial>($3); }
