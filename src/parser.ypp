%define parse.lac full
%define parse.error detailed
%{
#include <boost/lexical_cast.hpp>
#include <cstdlib>
#include "literal.hpp"
#include "yyglobal.hpp"
	int yylex(void);
	inline void yyerror(char const * str) { std::cerr<<"YYERROR:"<<str<<std::endl; exit(1);}

	%}

	%token NUMBER IDENTIFY STRING
	%token OPTION
	%left '-' '+'
	%left '*' '/'
	%right '^'
	%token '(' ')'

	%%

	file:
{} /*empty*/
| file poly_def {}
| file optionline {}

optionline:
OPTION IDENTIFY { parse_options(get<string>($1), get<string>($2)); }
|OPTION STRING { parse_options(get<string>($1), get<string>($2)); }
|OPTION NUMBER { parse_options(get<string>($1), get<string>($2)); }
|OPTION '-' NUMBER { parse_options(get<string>($1), "-" + get<string>($3)); }

poly_def:
IDENTIFY '=' exp
{
	auto& P = *get<spp>($3);
    int nli = vP_get(P);
	if (nli == -1)
	{
		nli = P.single_id();
		if (nli == -1)//new polynomial
		{
		}
	}
	else 
	{
        nli = literal_get(vP[nli].name());
        monomial m(nli);
        P = polynomial(m);
	}
	P.name() = get<string>($1);
	vP_push(P);
	vindex.push_back(vP.size());
	std::cerr<<"Parsing..."<<vindex.size()<<" polynomials have been parsed\r";
    //add this polynomial into literal if not added, so if this part appear in another polynomial can be replaced by this literal
    literal_add(P.name());
    //set correct ring level if not specified
    int idlvl = literal_find_ring_level(P.name());
    if (idlvl == -1)
        literal_set_ring_level(literal_get(P.name()), P.ring_level());
}

single_var:
IDENTIFY
{
	int i = literal_add(get<string>($1));
    $$ = i;
}
|'(' exp ')'
{
	int nli = vP_insert(*get<spp>($2));
    $$ = nli;
}
| IDENTIFY '(' exp ')'
{
	/*a function call*/
	int nli = vP_insert(*get<spp>($3));
	funcexpr nf;
	nf._funcname=get<string>($1);
	nf._paraid=nli;
	int nfi = vfunc_insert(nf);
	$$ = nfi;
}

single_term:
NUMBER
{
	int i = literal_add(get<string>($1), true);
	$$ = i;
}
| single_var
{
    $$ = $1;
}

mono:
single_term
{
    monomial m(get<int>($1));
    $$ = m;
}
| single_term '^' NUMBER
{
	int n = boost::lexical_cast<int64_t>(get<string>($3));
	$$ = monomial(get<int>($1), n);
}
| single_term '^' single_var
{
    /*a^b=>exp(b*log(a))*/
    /* it is single '^' single, because '^' has high priority */
    funcexpr nflog;//log(a)
    nflog._funcname=logname;
    nflog._paraid=get<int>($1);
    int nfilog = vfunc_insert(nflog);
    int idb = get<int>($3);
    polynomial blna(monomial(idb)*monomial(nfilog));
    int npid = vP_insert(blna);
    funcexpr nfexp;
    nfexp._funcname=expname;
    nfexp._paraid=npid;
    int nfiexp = vfunc_insert(nfexp);
    $$ = monomial(nfiexp);
}
| mono '/' single_term
{
    funcexpr nfinv;
    nfinv._funcname=invname;
    nfinv._paraid=get<int>($3);
    int nfiinv = vfunc_insert(nfinv);
    monomial res = get<monomial>($1);
    res *= monomial(nfiinv);
    $$ = std::move(res);
}
| mono '*' mono { $$ = get<monomial>($1) * get<monomial>($3); }
| '-' mono
{
/* it should be -mono rather than -single, because this unary minus operator has lower priority */
	auto& t = get<monomial>($2);
	t.reverse_sign();
	$$ = t;
}

exp:
mono { $$ = spp(new polynomial(get<monomial>($1))); }
| exp '+' mono
{
	$$ = std::move(get<spp>($1));
	*get<spp>($$) += std::move(get<monomial>($3));
}
| exp '-' mono
{
	$$ = std::move(get<spp>($1));
	*get<spp>($$) -= std::move(get<monomial>($3));
}
